<?php

namespace Sogedial\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ProductSelectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductSelectionRepository extends EntityRepository {

  public function deleteProductSelectionsOfUser($userId) {
    return $this->getEntityManager()
                    ->createQuery('
        DELETE
        FROM SogedialUserBundle:ProductSelection u
        WHERE u.user = :uid'
                    )
                    ->setParameter('uid', $userId)
                    ->getResult();
  }
  
  public function deleteFamilyFromUser($userId, $familyId){
    $query = 'DELETE
              FROM SogedialUserBundle:ProductSelection u
              WHERE u.user = :user_id
              AND (u.entity IN (SELECT p1.id
                                FROM SogedialSiteBundle:Produit p1
                                JOIN p1.famille f51
                                WHERE f51.id = :family_id) OR 
                   u.entity IN (SELECT p2.id
                                FROM SogedialSiteBundle:Produit p2
                                JOIN p2.famille f52
                                JOIN f52.parent f42
                                WHERE f42.id = :family_id) OR 
                   u.entity IN (SELECT p3.id
                                FROM SogedialSiteBundle:Produit p3
                                JOIN p3.famille f53
                                JOIN f53.parent f43
                                JOIN f43.parent f33
                                WHERE f33.id = :family_id) OR 
                   u.entity IN (SELECT p4.id
                                FROM SogedialSiteBundle:Produit p4
                                JOIN p4.famille f54
                                JOIN f54.parent f44
                                JOIN f44.parent f34
                                JOIN f34.parent f24
                                WHERE f24.id = :family_id) OR 
                   u.entity IN (SELECT p5.id
                                FROM SogedialSiteBundle:Produit p5
                                JOIN p5.famille f55
                                JOIN f55.parent f45
                                JOIN f45.parent f35
                                JOIN f35.parent f25
                                JOIN f25.parent f15
                                WHERE f15.id = :family_id))';
    $queryb = $this->getEntityManager()->createQuery($query);
    
    $queryb->setParameter('user_id', $userId);
    $queryb->setParameter('family_id', $familyId);

    return $queryb->getResult();
  }

  public function countNbAssortiment($family, $user_id) {
    $query = 'SELECT count(u)
              FROM SogedialUserBundle:ProductSelection u
              LEFT JOIN u.entity p
              LEFT JOIN p.famille f5
              LEFT JOIN f5.parent f4
              LEFT JOIN f4.parent f3
              LEFT JOIN f3.parent f2
              LEFT JOIN f2.parent f1 ';
    
    $query .= ' WHERE f' . $family->getType(). '.id = :family_id ';
    
    $parameter['family_id'] = $family->getId();
    
    // Filtre par permission
    $query .= " AND (f1.id IN (SELECT IDENTITY(s.entity) FROM SogedialUserBundle:FamilySelection s WHERE s.user = :user_id )  
                OR f2.id IN (SELECT IDENTITY(s1.entity) FROM SogedialUserBundle:FamilySelection s1 WHERE s1.user = :user_id )
                OR f3.id IN (SELECT IDENTITY(s2.entity) FROM SogedialUserBundle:FamilySelection s2 WHERE s2.user = :user_id )
                OR f4.id IN (SELECT IDENTITY(s3.entity) FROM SogedialUserBundle:FamilySelection s3 WHERE s3.user = :user_id )
                OR f5.id IN (SELECT IDENTITY(s4.entity) FROM SogedialUserBundle:FamilySelection s4 WHERE s4.user = :user_id )
                OR p.id IN (SELECT IDENTITY(s5.entity) FROM SogedialUserBundle:ProductSelection s5 WHERE s5.user = :user_id ) ) ";
    
    $parameter['user_id'] = $user_id;

    // Aucun tris utile pour le décompte des produits

    $queryb = $this->getEntityManager()->createQuery($query);
    foreach ($parameter as $key => $value) {
      $queryb->setParameter($key, $value);
    }

    return $queryb->getOneOrNullResult();
  }
  
  public function addProductSelectionFilter($user_id, $selection, $arg){
    $filter = '';
    $rsm = new ResultSetMapping();
    $rsm->addEntityResult('Sogedial\SiteBundle\Entity\Produit', 'p');
    $rsm->addFieldResult('p', 'code_produit', 'entity');
    $rsm->addScalarResult('user_id', 'user_id');
    $rsm->addScalarResult('show_price', 'show_price');
    $rsm->addScalarResult('show_promotion', 'show_promotion');
    $rsm->addScalarResult('show_exclusivity', 'show_exclusivity');
    $rsm->addScalarResult('is_new', 'is_new');
    $rsm->addScalarResult('coefficient', 'coefficient');
    
    $family = $selection->getEntity();
    if($family->getType() == 1){
      $filter .= " AND f1.id_famille = '" . $family->getId() . "' ";
    }
    elseif($family->getType() == 2){
      $filter .= " AND f2.id_famille = '" . $family->getId() . "' ";
    }
    elseif($family->getType() == 3){
      $filter .= " AND f3.id_famille = '" . $family->getId() . "' ";
    }
    elseif($family->getType() == 4){
      $filter .= " AND f4.id_famille = '" . $family->getId() . "' ";
    }
    elseif($family->getType() == 5){
      $filter .= " AND f5.id_famille = '" . $family->getId() . "' ";
    }
    
    for ($i = 0; $i < count($arg['search']); $i++) {
      // On recherche parmis les id de catégorie
      if (preg_match('/^[0-9]*$/', $arg['search'][$i])) {
        $filter .= " AND (f1.id_famille = '".$arg['search'][$i]."' OR f2.id_famille = '".$arg['search'][$i]."' OR f3.id_famille = '".$arg['search'][$i]."' OR f4.id_famille = '".$arg['search'][$i]."' OR f5.id_famille = '".$arg['search'][$i]."') ";
      } else {
        $filter .= " AND (p.denomination_produit LIKE '%".addslashes($arg['search'][$i])."%'
                OR p.marque_produit LIKE '%".addslashes($arg['search'][$i])."%'
                OR p.ean13_produit LIKE '%".addslashes($arg['search'][$i])."%'
                OR p.code_produit LIKE '%".addslashes($arg['search'][$i])."%'
                OR p.ingredients_produits LIKE '%".addslashes($arg['search'][$i])."%'
                OR p.denomination_import_produit LIKE '%".addslashes($arg['search'][$i])."%') ";
      }
    }

    for ($i = 0; $i < count($arg['marque']); $i++) {
      $filter .= " AND TRIM(p.marque_produit) = '".addslashes($arg['marque'][$i])."' ";
    }

    // On ajout le filtre sur les rayon (famille type =1)
    if (count($arg['rayon']) > 0) {
      $filter .= " AND f1.id_famille IN (" . implode(",", $arg['rayon']) . ") ";
    }

    // On ajout le filtre sur les familles (famille type =2)
    if (count($arg['familie']) > 0) {
      $filter .= " AND f2.id_famille IN (" . implode(",", $arg['familie']) . ") ";
    }

    // On ajout le filtre sur les sous familles (famille type =3)
    if (count($arg['sfamilie']) > 0) {
      $filter .= " AND f3.id_famille IN (" . implode(",", $arg['sfamilie']) . ") ";
    }

    // On ajout le filtre sur les gammes (MN, MD et PP)
    for ($i = 0; $i < count($arg['gamme']); $i++) {
      $filter .= " AND p.gamme_produit = '".$arg['gamme'][$i]."' ";
    }

    // On ajout le filtre sur les température ()
    for ($i = 0; $i < count($arg['temp']); $i++) {
      $filter .= " AND p.temperature = '".$arg['temp'][$i]."' ";
    }

    // On ajout le filtre sur les autres (a1, a2, a3, a4, gms, rhf et gmsrhf)
    for ($i = 0; $i < count($arg['autre']); $i++) {
      if ($arg['autre'][$i] == 'a4') {
        $filter .= " AND p.origine = 'FR' ";
      } elseif ($arg['autre'][$i] == 'gms') {
        $filter .= " AND p.gms_produit = 1 ";
      } elseif ($arg['autre'][$i] == 'rhf') {
        $filter .= " AND p.rhf_produit = 1 ";
      } elseif ($arg['autre'][$i] == 'rhfgms') {
        $filter .= " AND p.gms_produit = 1 AND p.rhf_produit = 1 ";
      } else {
          continue;
      }
    }
    
    $join = '';
    if ($arg['photo'] === '1' || in_array('photo',$arg['autre'])) {
      $join .= ' JOIN photo ph ON (p.code_produit = ph.fk_produit) ';
      $rsm->addJoinedEntityResult('Sogedial\SiteBundle\Entity\Photo' , 'ph', 'p', 'photo');
    }
    elseif($arg['photo'] == 2){
      $join .= ' LEFT JOIN photo ph ON (p.code_produit = ph.code_produit) ';
      $rsm->addJoinedEntityResult('Sogedial\SiteBundle\Entity\Photo' , 'ph', 'p', 'photo');
    }
    
    if($arg['photo'] === '2'){
      $filter .= ' AND ph.id_photo IS NULL ';
    }
    
    $query = "INSERT IGNORE INTO user_product_selections 
      (SELECT '".$user_id."' as 'user_id', p.code_produit as 'entity', '".$selection->getShowPrice()."' as 'show_price', '".$selection->getShowPromotion()."' as 'show_promotion', '".$selection->getShowExclusivity()."' as 'show_exclusivity', '".$selection->getCoefficient()."' as 'coefficient', '".$selection->getIsNew()."' as 'is_new'
              FROM produit p
              LEFT JOIN famille f5 ON (p.fk_famille = f5.id_famille)
              LEFT JOIN famille f4 ON (f5.fk_famille = f4.id_famille)
              LEFT JOIN famille f3 ON (f4.fk_famille = f3.id_famille)
              LEFT JOIN famille f2 ON (f3.fk_famille = f2.id_famille)
              LEFT JOIN famille f1 ON (f2.fk_famille = f1.id_famille)".$join."
              WHERE 1 = 1 ".$filter." )";

    $stmt = $this->getEntityManager()
                 ->getConnection()
                 ->prepare($query);
    return $stmt->execute();
  }

    public function findProductsSelectionsByUser($user) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p.id as productId,ps.show_promotion,ps.show_exclusivity,ps.is_new,ps.coefficient')
            ->from('SogedialUserBundle:ProductSelection','ps')
            ->leftjoin('ps.entity','p')
            ->where('ps.user = :user')
            ->setParameter('user',$user);

        return $qb->getQuery()->getScalarResult();
    }

}
