<?php

namespace Sogedial\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Sogedial\SiteBundle\Service\UseIndexWalker;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends EntityRepository
{

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCurrentOrderByUser($user, $entreprise)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_CURRENT\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $entreprise);

        return $qb->getQuery()->getOneOrNullResult();

    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCurrentOrderByUserNewVersion($user, $entreprise)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');
        $qb->addSelect('ent.raisonSociale as entreprise');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'ent',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'o.entreprise = ent')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->where('os.key = \'STATUS_CURRENT\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $entreprise);

        $result = $qb->getQuery()->getScalarResult();

        return current($result);

    }

    /**
     * @param $client
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOrderInfoByClient($client, $commande)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o, os.key');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->Where('o.client = :client')
            ->andWhere('o.id = :commande');

        $qb->setParameters(array('client' => $client->getCode(), 'commande' => $commande));

        return current($qb->getQuery()->getScalarResult());
    }


    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOrderInfo2($user, $commande)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o, os.key');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->Where('o.user = :user')
            ->andWhere('o.id= :commande');

        $qb->setParameters(array('user' => $user, 'commande' => $commande));
        $result = $qb->getQuery()->getScalarResult();

        return current($result);

    }

    public function getOrdersByUser($user, $client, $entreprise, $multiplyByPcb = true, $limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('sum(bp.montantFacturation) as montantFacturation');
        $qb->addSelect('sum(bp.colisFacture) as colisFacture');
        $qb->addSelect('os.key');
        $qb->addSelect('u.id as o_validator');
        $qb->addSelect('os.id as status_id');
        $qb->addSelect('os.libelle');
        $qb->addSelect('ent.raisonSociale as entreprise');
        $qb->addSelect('ent2.code as codePreCommandeEntreprise');
        $qb->addSelect('oos.createdAt');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');

        if ($multiplyByPcb) {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC * p.pcb) as totalMass');
            $qb->addSelect('SUM(op.quantite * p.pcb * op.prixUnitaire) as totalPrice');
        } else {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC ) as totalMass');
            $qb->addSelect('SUM(op.quantite * op.prixUnitaire) as totalPrice');
        }

        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op', \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->leftJoin('Sogedial\SiteBundle\Entity\BonPreparation', 'bp', \Doctrine\ORM\Query\Expr\Join::WITH, 'bp.commande = o')
            ->leftJoin('Sogedial\UserBundle\Entity\User', 'u', \Doctrine\ORM\Query\Expr\Join::WITH, 'u.id = o.validator')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent = o.entreprise')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'ent2', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent2 = o.codePrecommande')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('p.colis', 'c')
            ->where('(o.user = :user AND o.parent IS NOT NULL) OR o.client = :client')
            ->andWhere('os.id IN (3, 11)')
            ->andWhere('(o.codePrecommande IS NULL AND o.entreprise = :entreprise) or o.codePrecommande IS NOT NULL')
            ->orderBy('o.numero', 'DESC')
            ->groupBy('o.numero');

        $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op2', \Doctrine\ORM\Query\Expr\Join::WITH, 'op2.commande = o.parent AND op2.moq = 0')
            ->addSelect('count(DISTINCT op2) as totalMoq')
            ->groupBy('o.numero');

        if (is_object($user)) {
            $user = $user->getClient()->getCode();
        }

        if (null !== $limit) {
            $qb->setMaxResults($limit);
        }

        $qb->setParameter('user', $user);
        $qb->setParameter('client', $client);
        $qb->setParameter('entreprise', $entreprise);

        $query = $qb->getQuery();
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, '\Sogedial\SiteBundle\Service\UseIndexWalker');
        $query->setHint(UseIndexWalker::HINT_USE_INDEX, 'commande_idx');

        return $query->getScalarResult();
    }

    public function countCommandLineByMOQStatus($status, $societe)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(lc.id) as counter')
            ->from('SogedialSiteBundle:LigneCommande', 'lc')
            ->innerJoin('SogedialSiteBundle:Commande', 'o', \Doctrine\ORM\Query\Expr\Join::WITH, 'lc.commande = o')
            ->innerJoin('SogedialSiteBundle:Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent.code = :entreprise AND ent = o.entreprise')
            ->innerJoin('SogedialSiteBundle:Commande', 'o2', \Doctrine\ORM\Query\Expr\Join::WITH, 'o2.parent = o')
            ->innerJoin('SogedialSiteBundle:OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o2 AND oos.orderStatus = 2');

        if ($status === "VALID") {
            $qb->where('lc.moq = 0');
        } elseif ($status === "VALIDATED") {
            $qb->where('lc.moq = 1');
        }

        $qb->groupBy('lc.produit');
        $qb->setParameter('entreprise', $societe);

        $result = $qb->getQuery()->getResult();
        $sum = 0;

        foreach ($result as $key => $value) {
            $sum += intval($value["counter"]);
        }

        return $sum;
    }

    public function countOrdersByMOQStatus($status, $societe)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(lc.id) as counter')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('SogedialSiteBundle:LigneCommande', 'lc', \Doctrine\ORM\Query\Expr\Join::WITH, 'lc.commande = o')
            ->innerJoin('SogedialSiteBundle:Commande', 'o2', \Doctrine\ORM\Query\Expr\Join::WITH, 'o2.parent = o')
            ->innerJoin('SogedialSiteBundle:Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent.code = :entreprise AND ent = o.entreprise')
            ->innerJoin('SogedialSiteBundle:OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o2 AND oos.orderStatus = 2');

        $qb->where('lc.moq = 0 OR lc.moq = 1');
        $qb->andWhere('o.parent IS NULL')
            ->groupBy('o.id');

        $qb->setParameter('entreprise', $societe);

        return count($qb->getQuery()->getResult());
    }

    public function sumOthersSocietiesQuantitiesProduct($status, $societe, $ruleCode, $ean13)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('sum(lc.quantite) as otherQuantity')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\SiteBundle\Entity\Commande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.id = o.parent');

        /*if($status === "VALID"){
            $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.commande = op and lc.moq = 0');
        } elseif($status === "VALIDATED"){
            $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.commande = op and lc.moq = 1');
        } elseif($status === "ALL"){*/
        $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
            \Doctrine\ORM\Query\Expr\Join::WITH,
            'lc.commande = op and lc.moq IS NOT NULL');
        //}

        $qb->leftJoin('Sogedial\SiteBundle\Entity\RegleMOQ', 'r',
            \Doctrine\ORM\Query\Expr\Join::WITH,
            'r.code = :rule')
            ->innerJoin('Sogedial\SiteBundle\Entity\ProduitRegle', 'pr',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'pr.code = lc.produit AND pr.regle = r')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->innerJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.produit = p')
            ->leftJoin('oos.orderStatus', 'os')
            ->innerJoin('SogedialSiteBundle:Entreprise', 'ent',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'ent.code != :entreprise AND ent = o.entreprise');

        if ($status === "VALIDATED") {
            $qb->where('os.id = 3 OR os.id = 2');
        } else {
            $qb->where('os.id = 2');
        }

        $qb->andWhere('lc.ean13 = :ean13');

        $parameters = [
            'rule' => $ruleCode,
            'entreprise' => $societe,
            'ean13' => $ean13
        ];

        $qb->setParameters($parameters);

        $result = $qb->getQuery()->getOneOrNullResult();
        if (array_key_exists("otherQuantity", $result)) {
            if ($result["otherQuantity"] === NULL) {
                return 0;
            }
            return intval($result["otherQuantity"]);
        } else {
            return 0;
        }
    }

    public function getCommandesMOQ($status, $societe)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('u.id as user')
            ->addSelect('c.code as client, c.nom as clientName')
            ->addSelect('o.id as commande, o.numero as commande_numero')
            ->addSelect('lc.id as commandeLineCode, lc.quantite as quantity, lc.prixUnitaire as price, lc.pcb as pcb, lc.denominationProduitBase as product_name, lc.moq as moqStatus')
            ->addSelect("r.code as rule, CONCAT(r.quantiteMinimale, ' ', r.unite) as ruleName, r.group as ruleGroup, r.mix as ruleMix")
            ->addSelect("cpmoq.quantiteMinimale as client_produit_moq_quantity")
            ->addSelect('s.nom as supplier')
            ->addSelect('p.code as product, p.ean13')
            ->addSelect('cl.poidsBrutColis as weight, cl.colisPalette as pallet')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\UserBundle\Entity\User', 'u',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'u = o.user')
            ->innerJoin('Sogedial\SiteBundle\Entity\Client', 'c',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'c.meta = u.meta AND c.entreprise = u.entrepriseCourante')
            ->innerJoin('Sogedial\SiteBundle\Entity\Commande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.id = o.parent');

        if ($status === "VALID") {
            $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.commande = op and lc.moq = 0');
        } elseif ($status === "VALIDATED") {
            $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.commande = op and lc.moq = 1');
        } elseif ($status === "ALL") {
            $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'lc',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.commande = op and lc.moq IS NOT NULL');
        }

        $qb->leftJoin('Sogedial\SiteBundle\Entity\ProduitRegle', 'pr',
            \Doctrine\ORM\Query\Expr\Join::WITH,
            'pr.code = lc.produit')
            ->leftJoin('Sogedial\SiteBundle\Entity\RegleMOQ', 'r',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'pr.regle = r')
            ->innerJoin('Sogedial\SiteBundle\Entity\Supplier', 's',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'r.supplier = s')
            ->innerJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'lc.produit = p')
            ->leftJoin('Sogedial\SiteBundle\Entity\Colis', 'cl',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'cl.produit = p')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->innerJoin('SogedialSiteBundle:Entreprise', 'ent',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'ent.code = :entreprise AND ent = o.entreprise')
            ->leftJoin('SogedialSiteBundle:ClientProduitMOQ', 'cpmoq',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'cpmoq.client = c AND cpmoq.produit = p');

        $qb->where('os.id = 2');

        $qb->orderBy('r.mix', 'ASC')
            ->addorderBy('pr.regle', 'DESC')
            ->addOrderBy('p.code', 'DESC')
            ->setParameter('entreprise', $societe);

        return $qb->getQuery()->getResult();
    }

    public function getOrderPending($code_entreprise, $idUser)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('o');
        $qb->from('SogedialSiteBundle:Commande', 'o');

        $qb->innerJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->innerJoin('oos.orderStatus', 'os')
            ->Where('os.key = \'STATUS_CURRENT\'')
            ->andWhere('o.user = :idUser')
            ->setParameter("idUser", $idUser)
            ->andWhere('o.entreprise = :entreprise')
            ->setParameter("entreprise", $code_entreprise);

        return current($qb->getQuery()->getResult());
    }

    public function getOrderCounterByStatus($code_entreprise = false, $status = false)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(o.id) as _count');
        $qb->from('SogedialSiteBundle:Commande', 'o');

        $qb->innerJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->innerJoin('oos.orderStatus', 'os')
            ->Where('os.id <> 1')
            ->andWhere('os.id <> 5')
            ->andWhere('oos.orderStatus <> 6');

        // $qb->groupBy('o');

        if ($status !== false && $status != '') {
            $qb->andWhere('os.key = :status')
                ->setParameter("status", $status);
        }

        if ($code_entreprise !== false) {
            $qb->innerJoin('SogedialSiteBundle:Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent.code = :entreprise AND ent = o.entreprise')
                ->setParameter("entreprise", $code_entreprise);
        }

        return current($qb->getQuery()->getResult())['_count'];
    }

    /**
     * @param bool $multiplyByPcb
     * @param $entreprise
     * @param $user
     * @param $client
     * @param $limit
     * @return array
     */
    public function getOrdersToClient($multiplyByPcb, $entreprise, $user, $client,  $limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('sum(bp.montantFacturation) as montantFacturation');
        $qb->addSelect('sum(bp.colisFacture) as colisFacture');
        $qb->addSelect('os.key');
        $qb->addSelect('u.id as o_validator');
        $qb->addSelect('os.id as status_id');
        $qb->addSelect('os.libelle');
        $qb->addSelect('ent.raisonSociale as entreprise');
        $qb->addSelect('ent2.code as codePreCommandeEntreprise');
        $qb->addSelect('oos.createdAt');
        $qb->addSelect('count(op.id) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');
        $qb->addSelect('p.actif as etatProduit');

        if ($multiplyByPcb) {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC * p.pcb) as totalMass');
            $qb->addSelect('SUM(op.quantite * p.pcb * op.prixUnitaire) as totalPrice');
        } else {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC ) as totalMass');
            $qb->addSelect('SUM(op.quantite * op.prixUnitaire) as totalPrice');
        }

        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos', \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op', \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o.parent')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->leftJoin('Sogedial\SiteBundle\Entity\BonPreparation', 'bp', \Doctrine\ORM\Query\Expr\Join::WITH, 'bp.commande = o')
            ->leftJoin('Sogedial\UserBundle\Entity\User', 'u', \Doctrine\ORM\Query\Expr\Join::WITH, 'u.id = o.validator')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent = o.entreprise')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'ent2', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent2 = o.codePrecommande')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('p.colis', 'c')
            ->where('(o.user = :user AND o.parent IS NOT NULL) OR o.client = :client')
            ->andWhere('os.id IN (3, 11)')
            ->andWhere('(o.codePrecommande IS NULL AND o.entreprise = :entreprise) or o.codePrecommande IS NOT NULL')
            ->andWhere('p.actif=1')
            ->orderBy('o.numero', 'DESC')
            ->groupBy('o.numero');

        $qb->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op2', \Doctrine\ORM\Query\Expr\Join::WITH, 'op2.commande = o.parent AND op2.moq = 0')
            ->addSelect('count(DISTINCT op2) as totalMoq')
            ->groupBy('o.numero');

        if (is_object($user)) {
            $user = $user->getClient()->getCode();
        }

        if (null !== $limit) {
            $qb->setMaxResults($limit);
        }

        $qb->setParameter('user', $user);
        $qb->setParameter('client', $client);
        $qb->setParameter('entreprise', $entreprise);

        $query = $qb->getQuery();
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, '\Sogedial\SiteBundle\Service\UseIndexWalker');
        $query->setHint(UseIndexWalker::HINT_USE_INDEX, 'commande_idx');

        return $query->getScalarResult();
    }

    public function getOrdersToAdmin($multiplyByPcb = true, $code_entreprise = false, $status = false, $page)
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        $limit = 10;
        $limit1 = ($page - 1) * $limit;
        $limit2 = $limit;

        if ($limit1 < 0) {
            $limit1 = 0;
        }
        
        $params = array();
        $query = '
                SELECT 
                      e0_.cle AS cle_0, 
                      sum(b1_.montant_facturation) AS montantFacturation, 
                      sum(b1_.colis_facture) AS colisFacture, 
                      f2_.id_utilisateur AS o_validator, 
                      e0_.libelle AS libelle, 
                      e0_.id AS os_id, 
                      f3_.id_utilisateur AS userId, 
                      f3_.pays_vente AS paysVente, 
                      f3_.nature_utilisateur AS nature, 
                      c4_.nom AS cl_nom, 
                      c5_.created_at AS created_at_10, 
                      count(p6_.code_produit) AS totalProducts,
                      sum(l7_.quantite) AS totalQuantity,
                      ';

                        if($multiplyByPcb) {
                            $query .= ' 
                                SUM(l7_.quantite * c8_.poidsBrutUVC * p6_.pcb) AS totalMass, 
                                SUM(l7_.quantite * p6_.pcb * l7_.prix_unitaire) AS totalPrice,
                            ';
                      } else {
                            $query .= '
                            SUM(l7_.quantite * c8_.poidsBrutUVC) AS totalMass, 
                            SUM(l7_.quantite * l7_.prix_unitaire) AS totalPrice,
                            ';
                        }

                    $query .='
                       
                      c9_.numero AS o_numero, 
                      count(DISTINCT l10_.id) AS totalMoq, 
                      e11_.raison_sociale AS entreprise, 
                      c9_.id AS o_id, 
                      c9_.numero AS o_numero, 
                      c9_.date_modification AS o_updatedAt, 
                      c9_.created_at AS o_createdAt, 
                      c9_.delivery_date AS o_deliveryDate, 
                      c9_.validating_date AS validating_date_23, 
                      c9_.parent AS o_parent, 
                      c9_.temperature_commande AS o_temperatureCommande, 
                      c9_.montant_commande AS o_montantCommande, 
                      c9_.application_origine AS application_origine_27, 
                      c9_.demande_colis AS o_demandeColis, 
                      c9_.commentaire_client AS commentaire_client_29, 
                      c9_.poids_commande AS poids_commande_30, 
                      c9_.volume_commande AS volume_commande_31, 
                      c9_.recept_pdf AS recept_pdf_32, 
                      c9_.recept_email AS recept_email_33, 
                      c9_.dates_string AS dates_string_34, 
                      c12_.code_client AS code_client_35, 
                      c12_.nom AS clu_nom, 
                      c12_.date_debut_validite AS date_debut_validite_37, 
                      c12_.date_fin_validite AS date_fin_validite_38, 
                      c12_.responsable1 AS responsable1_39, 
                      c12_.responsable2 AS responsable2_40, 
                      c12_.adresse1 AS adresse1_41, 
                      c12_.adresse2 AS adresse2_42, 
                      c12_.code_postale AS code_postale_43, 
                      c12_.ville AS ville_44, 
                      c12_.telephone AS telephone_45, 
                      c12_.fax AS fax_46, 
                      c12_.email AS email_47, 
                      c12_.statut AS statut_48, 
                      c12_.regroupement_client AS regroupement_client_49, 
                      c12_.e_actif AS e_actif_50, 
                      c12_.promotions_compteur AS promotions_compteur_51, 
                      c12_.pays AS pays_52, 
                      c12_.latitude AS latitude_53, 
                      c12_.longitude AS longitude_54, 
                      c12_.is_prospect AS is_prospect_55, 
                      c12_.typologie_client AS typologie_client_56, 
                      c12_.commentaire_prospect AS commentaire_prospect_57 
                    FROM 
                      commande c9_
                      LEFT JOIN commande_etatcommande c5_ USE INDEX(IDX_2781D8CE8D9F6D38) ON (c5_.order_id = c9_.id) 
                      LEFT JOIN ligneCommande l7_ ON (l7_.commande_id = c9_.parent) 
                      LEFT JOIN produit p6_ ON (
                        l7_.code_produit = p6_.code_produit
                      ) 
                      LEFT JOIN bon_preparation b1_ ON (b1_.id = c9_.id) 
                      LEFT JOIN fos_user f2_ ON (
                        f2_.id_utilisateur = c9_.validator_id
                      ) 
                      LEFT JOIN etatcommande e0_ ON c5_.orderStatus_id = e0_.id 
                      LEFT JOIN colis c8_ ON p6_.code_produit = c8_.code_produit 
                      LEFT JOIN fos_user f3_ ON c9_.user_id = f3_.id_utilisateur 
                      LEFT JOIN client c12_ ON c9_.code_client = c12_.code_client 
                      LEFT JOIN client c4_ ON (c4_.code_meta_client = f3_.meta) 
                      LEFT JOIN ligneCommande l10_ ON (
                        l10_.commande_id = c9_.parent 
                        AND l10_.moq = 0
                      ) 
                      INNER JOIN entreprise e11_ ON (
                        e11_.code_entreprise = :code_entreprise
                        AND e11_.code_entreprise = c9_.code_entreprise
                      ) 
                    WHERE 
                      e0_.id IN (3, 11)
                      AND c9_.numero IS NOT NULL
        ';

        if ($status !== false && $status != '') {
            $query .= 'AND e0_.cle = :status';
            $params = array_merge($params, array('status' => $status));
        }

        if ($code_entreprise === false) {
            $query .= 'LEFT JOIN entreprise ent ON (ent.code_entreprise = c9_.code_entreprise)';
        }

        $params = array_merge($params, array('code_entreprise' => $code_entreprise));

        $query .= '
            GROUP BY 
                      c9_.date_modification, 
                      c9_.id, 
                      c9_.numero, 
                      c9_.created_at, 
                      c9_.delivery_date, 
                      c9_.validating_date, 
                      c9_.parent, 
                      c9_.temperature_commande, 
                      c9_.montant_commande, 
                      c9_.application_origine, 
                      c9_.demande_colis, 
                      c9_.commentaire_client, 
                      c9_.poids_commande, 
                      c9_.volume_commande, 
                      c9_.recept_pdf, 
                      c9_.recept_email, 
                      c9_.dates_string, 
                      c9_.user_id, 
                      c9_.code_client, 
                      c9_.code_entreprise, 
                      c9_.validator_id, 
                      c9_.code_precommande 
                    ORDER BY 
                      c9_.date_modification DESC 
                    LIMIT ' .$limit2. ' OFFSET ' . $limit1.
        ';';

        $stmt = $conn->prepare($query);
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    /**
     * @param bool $multiplyByPcb
     * @param bool $code_entreprise
     * @param bool $status
     * @return array
     */
    public function getOrdersToAdminDashboard($multiplyByPcb = true, $code_entreprise = false, $status = false)
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        $params = array();
        $query = '
                SELECT 
                      e0_.cle AS cle_0, 
                      sum(b1_.montant_facturation) AS montantFacturation, 
                      sum(b1_.colis_facture) AS colisFacture, 
                      f2_.id_utilisateur AS o_validator, 
                      e0_.libelle AS libelle, 
                      e0_.id AS os_id, 
                      f3_.id_utilisateur AS userId, 
                      f3_.pays_vente AS paysVente, 
                      f3_.nature_utilisateur AS nature, 
                      c4_.nom AS cl_nom, 
                      c5_.created_at AS created_at_10, 
                      count(p6_.code_produit) AS totalProducts,
                      sum(l7_.quantite) AS totalQuantity,
                      ';

        if($multiplyByPcb) {
            $query .= ' 
                                SUM(l7_.quantite * c8_.poidsBrutUVC * p6_.pcb) AS totalMass, 
                                SUM(l7_.quantite * p6_.pcb * l7_.prix_unitaire) AS totalPrice,
                            ';
        } else {
            $query .= '
                            SUM(l7_.quantite * c8_.poidsBrutUVC) AS totalMass, 
                            SUM(l7_.quantite * l7_.prix_unitaire) AS totalPrice,
                            ';
        }

        $query .='
                       
                      c9_.numero AS o_numero, 
                      count(DISTINCT l10_.id) AS totalMoq, 
                      e11_.raison_sociale AS entreprise, 
                      c9_.id AS o_id, 
                      c9_.numero AS o_numero, 
                      c9_.date_modification AS o_updatedAt, 
                      c9_.created_at AS o_createdAt, 
                      c9_.delivery_date AS o_deliveryDate, 
                      c9_.validating_date AS validating_date_23, 
                      c9_.parent AS o_parent, 
                      c9_.temperature_commande AS o_temperatureCommande, 
                      c9_.montant_commande AS o_montantCommande, 
                      c9_.application_origine AS application_origine_27, 
                      c9_.demande_colis AS o_demandeColis, 
                      c9_.commentaire_client AS commentaire_client_29, 
                      c9_.poids_commande AS poids_commande_30, 
                      c9_.volume_commande AS volume_commande_31, 
                      c9_.recept_pdf AS recept_pdf_32, 
                      c9_.recept_email AS recept_email_33, 
                      c9_.dates_string AS dates_string_34, 
                      c12_.code_client AS code_client_35, 
                      c12_.nom AS clu_nom, 
                      c12_.date_debut_validite AS date_debut_validite_37, 
                      c12_.date_fin_validite AS date_fin_validite_38, 
                      c12_.responsable1 AS responsable1_39, 
                      c12_.responsable2 AS responsable2_40, 
                      c12_.adresse1 AS adresse1_41, 
                      c12_.adresse2 AS adresse2_42, 
                      c12_.code_postale AS code_postale_43, 
                      c12_.ville AS ville_44, 
                      c12_.telephone AS telephone_45, 
                      c12_.fax AS fax_46, 
                      c12_.email AS email_47, 
                      c12_.statut AS statut_48, 
                      c12_.regroupement_client AS regroupement_client_49, 
                      c12_.e_actif AS e_actif_50, 
                      c12_.promotions_compteur AS promotions_compteur_51, 
                      c12_.pays AS pays_52, 
                      c12_.latitude AS latitude_53, 
                      c12_.longitude AS longitude_54, 
                      c12_.is_prospect AS is_prospect_55, 
                      c12_.typologie_client AS typologie_client_56, 
                      c12_.commentaire_prospect AS commentaire_prospect_57 
                    FROM 
                      commande c9_
                      LEFT JOIN commande_etatcommande c5_ USE INDEX(IDX_2781D8CE8D9F6D38) ON (c5_.order_id = c9_.id) 
                      LEFT JOIN ligneCommande l7_ ON (l7_.commande_id = c9_.parent) 
                      LEFT JOIN produit p6_ ON (
                        l7_.code_produit = p6_.code_produit
                      ) 
                      LEFT JOIN bon_preparation b1_ ON (b1_.id = c9_.id) 
                      LEFT JOIN fos_user f2_ ON (
                        f2_.id_utilisateur = c9_.validator_id
                      ) 
                      LEFT JOIN etatcommande e0_ ON c5_.orderStatus_id = e0_.id 
                      LEFT JOIN colis c8_ ON p6_.code_produit = c8_.code_produit 
                      LEFT JOIN fos_user f3_ ON c9_.user_id = f3_.id_utilisateur 
                      LEFT JOIN client c12_ ON c9_.code_client = c12_.code_client 
                      LEFT JOIN client c4_ ON (c4_.code_meta_client = f3_.meta) 
                      LEFT JOIN ligneCommande l10_ ON (
                        l10_.commande_id = c9_.parent 
                        AND l10_.moq = 0
                      ) 
                      INNER JOIN entreprise e11_ ON (
                        e11_.code_entreprise = :code_entreprise
                        AND e11_.code_entreprise = c9_.code_entreprise
                      ) 
                    WHERE 
                      e0_.id IN (3, 11)
                      AND c9_.numero IS NOT NULL
        ';

        if ($status !== false && $status != '') {
            $query .= 'AND e0_.cle = :status';
            $params = array_merge($params, array('status' => $status));
        }

        if ($code_entreprise === false) {
            $query .= 'LEFT JOIN entreprise ent ON (ent.code_entreprise = c9_.code_entreprise)';
        }

        $params = array_merge($params, array('code_entreprise' => $code_entreprise));

        $query .= '
            GROUP BY 
                      c9_.date_modification,
                      c9_.id, 
                      c9_.numero,  
                      c9_.created_at, 
                      c9_.delivery_date, 
                      c9_.validating_date, 
                      c9_.parent, 
                      c9_.temperature_commande, 
                      c9_.montant_commande, 
                      c9_.application_origine, 
                      c9_.demande_colis, 
                      c9_.commentaire_client, 
                      c9_.poids_commande, 
                      c9_.volume_commande, 
                      c9_.recept_pdf, 
                      c9_.recept_email, 
                      c9_.dates_string, 
                      c9_.user_id, 
                      c9_.code_client, 
                      c9_.code_entreprise, 
                      c9_.validator_id, 
                      c9_.code_precommande 
                    ORDER BY 
                      c9_.date_modification DESC 
                    LIMIT 5';

        $stmt = $conn->prepare($query);
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    // TODO : mettre à clean ces methode: exemple : une seule méthode a qui on lui passe des parametres sur le statut a chercher
    public function getBasketToAdmin($multiplyByPcb, $code_entreprise = false, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $checkStock = ($multiplyByPcb) ? "s.stockTheoriqueColis != 0" : "s.stockTheoriqueUc != 0";

        $qb->select('o');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('os.key');
        $qb->addSelect('u.id as userId,u.paysVente, u.nature');
        //$qb->addSelect('CASE WHEN cl.nom IS NULL THEN clu.nom AS nom ELSE cl.nom AS NOM');
        $qb->addSelect('meta.libelle AS nom');
        $qb->addSelect('oos.createdAt');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');
        if ($multiplyByPcb) {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC * p.pcb) as totalMass');
            $qb->addSelect('SUM(op.quantite * p.pcb * op.prixUnitaire) as totalPrice');
        } else {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC ) as totalMass');
            $qb->addSelect('SUM(op.quantite * op.prixUnitaire) as totalPrice');
        }
        $qb->addSelect('o.numero');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\LigneCommande', 'op',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->leftJoin('Sogedial\SiteBundle\Entity\Stock', 's',
                \Doctrine\ORM\Query\Expr\Join::WITH, 's.produit = p')
            ->leftJoin('oos.orderStatus', 'os')
            ->leftJoin('p.colis', 'c')
            ->leftJoin('o.user', 'u')
            ->leftJoin('u.meta', 'meta')
            ->leftJoin('Sogedial\SiteBundle\Entity\Client', 'clu', \Doctrine\ORM\Query\Expr\Join::WITH, 'o.client = clu AND clu.meta = u.meta')
            ->Where('os.key = \'STATUS_CURRENT\'')
            ->andWhere($checkStock)
            ->groupBy('o.createdAt')
            ->orderBy('o.createdAt', 'DESC');

        if (null !== $limit) {
            $qb->setMaxResults($limit);
        }

        if ($code_entreprise !== false) {
            $qb->innerJoin('SogedialSiteBundle:Entreprise', 'ent', \Doctrine\ORM\Query\Expr\Join::WITH, 'ent.code = :entreprise AND ent = o.entreprise')
                ->setParameters(["entreprise" => $code_entreprise]);
        }

        $query = $qb->getQuery();
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, '\Sogedial\SiteBundle\Service\UseIndexWalker');
        $query->setHint(UseIndexWalker::HINT_USE_INDEX, 'commande_idx');

        return $query->getScalarResult();

    }

    public function getEntrepriseInfosForRecapByOrder($orderId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o.numero, o.id');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('e.code, e.codePostal, e.raisonSociale, e.ville, e.ville, e.pays, e.adresse1, e.valeur, e.telephone, e.fax, e.nomEnvironnement');
        $qb->addSelect('os.key');
        $qb->addSelect('c.code as codeClient');

        $qb
            ->leftJoin('o.user', 'u')
            ->leftJoin('Sogedial\SiteBundle\Entity\Client', 'c',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'u.meta = c.meta AND o.entreprise = c.entreprise')
            ->leftJoin('o.entreprise', 'e')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('o.id = :orderId');

        $qb->setParameter('orderId', $orderId);

        return $qb->getQuery()->getSingleResult();
    }

    public function getClientInfosForRecapByOrder($orderId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o.numero, o.id');
        $qb->from('SogedialSiteBundle:Commande', 'o');
        $qb->addSelect('c.code, c.nom, c.adresse1, c.adresse2, c.codePostale, c.ville, c.telephone, c.email, u.cgvCpvSignedAt, u.cgvCpvUpdatedAt, u.alreadySigned, u.montantFranco, u.flagFranco, u.cgvCpv as typeCondition');
        $qb->addSelect('os.key, e.code as codeEntreprise');

        $qb
            //->leftJoin('o.user', 'u')
            ->leftJoin('Sogedial\UserBundle\Entity\User', 'u',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'u = o.user')
            ->leftJoin('Sogedial\SiteBundle\Entity\Client', 'c',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'u.meta = c.meta AND o.entreprise = c.entreprise')
            ->leftJoin('Sogedial\SiteBundle\Entity\Entreprise', 'e',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'e.code = u.entrepriseCourante AND e.entrepriseParent = u.entreprise AND e.entrepriseParent = o.entreprise AND  e.entrepriseParent IS NOT NULL')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->innerJoin('oos.orderStatus', 'os')
            ->where('o.id = :orderId');

        $qb->setParameter('orderId', $orderId);

        return $qb->getQuery()->getSingleResult();
    }

    private function getCommandesWithClient()
    {
        $qb = $this->_em->createQueryBuilder();

        return $qb->select('o.id as commande, cl.code as client')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\UserBundle\Entity\User', 'user',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'user = o.user')
            ->innerJoin('Sogedial\SiteBundle\Entity\MetaClient', 'meta',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'meta = user.meta')
            ->innerJoin('Sogedial\SiteBundle\Entity\Client', 'cl',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'cl.meta = meta AND cl.entreprise = o.entreprise');
    }

    /**
     * @return array
     */
    public function getCommandesWithClientNewVersion()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o.id as commande, cl.code as client')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\UserBundle\Entity\User', 'user',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'user = o.user')
            ->innerJoin('Sogedial\SiteBundle\Entity\MetaClient', 'meta',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'meta = user.meta')
            ->innerJoin('Sogedial\SiteBundle\Entity\Client', 'cl',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'cl.meta = meta AND cl.entreprise = o.entreprise')
            ->where('o.parent IS NOT NULL AND o.receptPDF = 0')
            ->andWhere('o.parent IS NOT NULL AND o.receptEmail = 0')
        ;

        $results = array();
        $resultsQuery =  $qb->getQuery()->getResult();

        foreach ($resultsQuery as $key => $value) {

            array_push(
                $results,
                [
                    "client" => $this->_em->getRepository('SogedialSiteBundle:Client')->findOneByCode($value["client"]),
                    "commande" => $this->_em->getRepository('SogedialSiteBundle:Commande')->findOneById($value["commande"])
                ]
            );
        }

        return $results;
    }

    /**
     * @return array
     */
    public function getCommandesWithClientForEmailing()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o.id as commande, cl.code as client')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\UserBundle\Entity\User', 'user',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'user = o.user')
            ->innerJoin('Sogedial\SiteBundle\Entity\MetaClient', 'meta',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'meta = user.meta')
            ->innerJoin('Sogedial\SiteBundle\Entity\Client', 'cl',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'cl.meta = meta AND cl.entreprise = o.entreprise AND cl.isRecipient = 1')
            ->where('o.parent IS NOT NULL AND o.receptClientXlsx = 0')
            ->andWhere('o.parent IS NOT NULL AND o.receptClientEmail = 0')
            ->andWhere('o.parent IS NOT NULL AND o.receptPDF = 1')
        ;

        $results = array();
        $resultsQuery =  $qb->getQuery()->getResult();

        foreach ($resultsQuery as $key => $value) {

            array_push(
                $results,
                [
                    "client" => $this->_em->getRepository('SogedialSiteBundle:Client')->findOneByCode($value["client"]),
                    "commande" => $this->_em->getRepository('SogedialSiteBundle:Commande')->findOneById($value["commande"])
                ]
            );
        }

        return $results;
    }

    public function getByParentTemperatureOrderStatus($panierId, $temperature, $orderStatus)
    {
        $parameters = array(
            "orderstatus" => $orderStatus,
            "panier" => $panierId,
            "temperature" => $temperature
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from('SogedialSiteBundle:Commande', 'o')
            ->innerJoin('Sogedial\SiteBundle\Entity\OrderStatus', 'os',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'os.key = :orderstatus')
            ->innerJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oss',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oss.orderStatus = os AND oss.order = o')
            ->where("o.parent = :panier")
            ->andwhere("o.temperatureCommande = :temperature");

        $qb->setParameters($parameters);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
    TODO: ce code est tres moche, mais je n'ai pas reussi a le faire de maniere plus optimale,
    il faut reflechir a une meilleur solution pour capturer plusieurs entitees doctrines dans un seul select
    - Thomas Salmon
    */
    private function getCommandesResults($resultsQuery)
    {
        $results = array();

        foreach ($resultsQuery as $key => $value) {
            array_push(
                $results,
                [
                    "client" => $this->_em->getRepository('SogedialSiteBundle:Client')->findOneByCode($value["client"]),
                    "commande" => $this->_em->getRepository('SogedialSiteBundle:Commande')->findOneById($value["commande"])
                ]
            );
        }

        return $results;
    }

    public function getCommandesNeedReceptPdfWithClient()
    {
        $qb = $this->getCommandesWithClient();
        $qb->where('o.parent IS NOT NULL AND o.receptPDF = 0');

        return $this->getCommandesResults($qb->getQuery()->getResult());
    }

    public function getCommandesNeedReceptEmailWithClient()
    {
        $qb = $this->getCommandesWithClient();
        $qb->where('o.parent IS NOT NULL AND o.receptEmail = 0');

        return $this->getCommandesResults($qb->getQuery()->getResult());
    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPendingOrder($user)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->select('o, u, cl')
            ->leftJoin('o.user', 'u')
            ->leftJoin('Sogedial\SiteBundle\Entity\Client', 'c',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'u.meta = c.meta')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_PENDING\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise')
            ->andWhere('o.entreprise = c.entreprise')
            ->orderBy('o.numero', 'DESC');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $user->getEntrepriseCourante());

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getApprouvedOrder($user)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_APPROVED\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise')
            ->orderBy('o.numero', 'DESC');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $user->getEntrepriseCourante());

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getNumberOfPendingOrder($user)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->add('select', 'count(o.id) as nbrPendingOrder')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_PENDING\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $user->getEntrepriseCourante());

        return $qb->getQuery()->getSingleResult();

    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getNumberOfApprovedOrder($user, $entreprise)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->add('select', 'count(o.id) as nbrApprovedOrder')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_APPROVED\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise');

        $qb->setParameter('user', $user);
        $qb->setParameter('entreprise', $entreprise);

        return $qb->getQuery()->getSingleResult();

    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOrderNumber()
    {
        $qb = $this->createQueryBuilder('o');
        $qb->add('select', 'count(o.id) as nbrOrder')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key != \'STATUS_DELETED\'');

        return $qb->getQuery()->getSingleResult();

    }

    /**
     * @param $orderId
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOrderStatusByOrder($orderId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('os.key');
        $qb->from('SogedialSiteBundle:Commande', 'o');

        $qb
            ->leftJoin('o.user', 'u')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('o.id = :orderId');

        $qb->setParameter('orderId', $orderId);

        return $qb->getQuery()->getSingleResult();
    }

    public function getListCommandWithNotReferecedProducts()
    {
        $qb = $this->createQueryBuilder('o');

        $qb->select('distinct o')
            ->innerJoin('SogedialUserBundle:User', 'u', \Doctrine\ORM\Query\Expr\Join::WITH, 'o.user = u')//Evite de faire remonter des compte fos_user qui n'existe plus
            ->innerJoin('SogedialSiteBundle:LigneCommande', 'l', \Doctrine\ORM\Query\Expr\Join::WITH, 'o.parent = l.commande')
            ->leftJoin('SogedialSiteBundle:ProduitMeti', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'l.produit=p.produit')
            ->where('o.codePrecommande is not null AND p.produit is null')
            ->orderBy('o.deliveryDate', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getCodeClientOriginal($orderId)
    {

        //Quick fix recuperation du code produit meti lors de l'affichage du recap des commandes grace au bon code renvoyer par cette fonction
        //Recuperation du userId + code entreprise commande
        $qbCommande = $this->_em->createQueryBuilder();
        $qbCommande->select('c')
            ->from('SogedialSiteBundle:Commande', 'c')
            ->where("c.id = :orderId")
            ->setParameter('orderId', $orderId);

        $commande = current($qbCommande->getQuery()->getResult());

        if ($commande->getUser()->getMeta() == null || $commande->getEntreprise() == null) {
            return null;
        }

        //Recuperation du code client de la commande
        $qbClient = $this->_em->createQueryBuilder();
        $qbClient->select('cl')
            ->from('SogedialSiteBundle:Client', 'cl')
            ->where("cl.meta = :meta AND cl.entreprise = :entreprise")
            ->innerJoin('SogedialUserBundle:User', 'u', \Doctrine\ORM\Query\Expr\Join::WITH, 'cl.meta = u.meta')//Evite de faire remonter des compte fos_user qui n'existe plus
            ->setParameters(array('meta' => $commande->getUser()->getMeta()->getCode(), 'entreprise' => $commande->getEntreprise()->getCode()));

        $client = current($qbClient->getQuery()->getResult());

        if ($client == null) {
            return null;
        }

        $qbEntreprise = $this->_em->createQueryBuilder();

        $codeEntrepriseCommande = $commande->getEntreprise()->getCode();

        //Recuperation du code client de la commande
        $qbEntreprise->select('e')
            ->from('SogedialSiteBundle:Entreprise', 'e')
            ->where("e.code = :entreprise")
            ->setParameter('entreprise', $codeEntrepriseCommande);

        $entreprise = current($qbEntreprise->getQuery()->getResult());

        $codeClientOrigine = $client->getCode();
        if ($entreprise->getEntrepriseParent() != null) {
            $codeClientOrigine = $entreprise->getEntrepriseParent()->getCode() . "-" . explode("-", $client->getCode())[1];
        }

        return $codeClientOrigine;
        //Fin recuperation code client original
    }

    /**
     * @return array
     */
    public function getOrderBySpecificStatus()
    {
        $qb = $this->createQueryBuilder('o');

        $qb->select('o')
            ->leftJoin('Sogedial\SiteBundle\Entity\OrderOrderStatus', 'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'oos.order = o')
            ->leftJoin('oos.orderStatus', 'os')
            ->where('os.key = \'STATUS_BASKET_PENDING\'');

        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getListPanierId()
    {
        $list = array();
        $conn = $this->getEntityManager()
            ->getConnection();

        $params = array();
        $query = '
                SELECT c.parent as panierId
                FROM commande c, commande_etatcommande ce 
                WHERE c.id=ce.order_id AND numero IS NULL 
                AND parent IS NOT NULL 
                ORDER BY id DESC
        ';

        $stmt = $conn->prepare($query);
        $stmt->execute($params);

        $resultats = $stmt->fetchAll();

        foreach ( $resultats as $key => $resultat) {
            $list[] = $resultat['panierId'];
        }

        return $list;

    }

    public function getListPcmdOrdersToSend()
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        $params = array();
        $lastThirtyDate = date('Y-m-d',strtotime("-30 day"));

        $query = '
                SELECT cl.nom as client, cl.ville as ville,  
                    c.numero as numero , 
                    c.date_modification as date_validation, 
                    lc.code_produit as code_produit, 
                    lc.`denomination_produit_base` as denomination, 
                    lc.quantite as QuantiteColis, 
                    lc.quantite*lc.pcb as quantiteUnitaire, 
                    lc.prix_unitaire as prix_unitaire, 
                    lc.`montant_total` as prix_total, 
                    lc.temperature_produit
                FROM `ligneCommande` lc, commande c, commande_etatcommande ec, fos_user u, client cl
                where c.parent=lc.commande_id
                and ec.order_id = c.id
                and ec.orderStatus_id = 3
                and c.code_entreprise=1302
                and cl.code_entreprise=c.code_entreprise
                and c.user_id=u.id_utilisateur
                and cl.code_meta_client=u.meta
                and c.created_at >=' . " '$lastThirtyDate' " .
               ' Order by cl.nom, c.numero desc, temperature_produit

        ';

        $stmt = $conn->prepare($query);
        $stmt->execute($params);

        $resultats = $stmt->fetchAll();

        return $resultats;

    }

    /**
     * @return array
     */
    public function getListPcmdOrdersSinceLastWeek()
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        $params = array();
        $lastweekDate = date('Y-m-d',strtotime("-7 day"));

        $query = '
                SELECT c.id as comandId, c.numero as numero, e.code_entreprise as codeEntreprise
                FROM commande c, commande_etatcommande ec, fos_user u, entreprise e
                where ec.order_id = c.id
                and c.code_entreprise = e.code_entreprise
                and ec.orderStatus_id = 3
                and c.code_entreprise=1302
                and c.user_id=u.id_utilisateur
                and c.created_at >=' . " '$lastweekDate' " .
              ' and c.parent IS NOT NULL
                Order by c.numero desc
        ';

        $stmt = $conn->prepare($query);
        $stmt->execute($params);

        $resultats = $stmt->fetchAll();

        return $resultats;

    }

}
