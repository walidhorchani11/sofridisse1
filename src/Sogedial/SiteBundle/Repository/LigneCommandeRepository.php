<?php

namespace Sogedial\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LigneCommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LigneCommandeRepository extends EntityRepository
{
    public function getCurrentOrderProductByUserAndProduct($user, $entreprise, $produit)
    {
        $qb = $this->createQueryBuilder('op');

        $qb
            ->leftJoin('op.commande', 'o')
            ->leftJoin(
                'Sogedial\SiteBundle\Entity\OrderOrderStatus',
                'oos',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'oos.order = o'
            )
            ->leftJoin('oos.orderStatus', 'os')
            ->where('op.produit = :produit')
            ->andwhere('os.key = \'STATUS_CURRENT\'')
            ->andWhere('o.user = :user')
            ->andWhere('o.entreprise = :entreprise');

        $qb->setParameter('user', $user)
            ->setParameter('produit', $produit)
            ->setParameter('entreprise', $entreprise);

        return $qb->getQuery()->getOneOrNullResult();

    }

    public function initialiseOrder($OrderId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->delete('SogedialSiteBundle:LigneCommande', 'op')
            ->where('op.commande = :OrderId')
            ->setParameter('OrderId', $OrderId);

        return $qb->getQuery()->execute();
    }

    public function clearLigneCommande($orderId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->update('SogedialSiteBundle:LigneCommande', 'op')
            ->set('op.quantite', 0)
            ->set('op.montantTotal', 0)
            ->where('op.commande = :orderId')
            ->setParameter('orderId', $orderId);

        return $qb->getQuery()->execute();
    }

    /**
     * @param $orderId
     * @param $temperature
     * @param bool $multiplyByPcb
     * @return mixed
     */
    public function getLigneByOrderIdAndTemperature($orderId, $temperature, $multiplyByPcb = true)
    {
        $ordersParameters = array(
            'orderId' => $orderId,
            'temperature' => $temperature
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('op');
        $qb->from('SogedialSiteBundle:LigneCommande', 'op');
        $qb->addSelect('o.numero, o.deliveryDate, o.updatedAt, o.id');
        $qb->addSelect('count(p) as totalProducts');
        $qb->addSelect('sum(op.quantite) as totalQuantity');

        if ($multiplyByPcb) {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC * p.pcb) as totalMass');
            $qb->addSelect('SUM(op.quantite * p.pcb * op.prixUnitaire) as totalPrice');
        } else {
            $qb->addSelect('SUM(op.quantite * c.poidsBrutUVC ) as totalMass');
            $qb->addSelect('SUM(op.quantite * op.prixUnitaire) as totalPrice');
        }

        $qb->leftJoin('Sogedial\SiteBundle\Entity\Commande', 'o',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o.parent')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->leftJoin('p.colis', 'c')
            ->where('op.commande = :orderId')
            ->andWhere('op.temperatureProduit = :temperature')
            ->andWhere('o.temperatureCommande = :temperature')
            ->setParameters($ordersParameters);

        return $qb->getQuery()->getScalarResult();

    }

    public function getQuantityAndSumByOrderIdAndTemperature($orderId, $temperature)
    {
        $ordersParameters = array(
            'orderId' => $orderId,
            'temperature' => $temperature
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('sum(op.quantite) as totalQuantity')
            ->addSelect('sum(op.montantTotal) as totalSum')
            ->from('SogedialSiteBundle:LigneCommande', 'op')
            ->where('op.commande = :orderId')
            ->andWhere('op.temperatureProduit = :temperature')
            ->setParameters($ordersParameters);

        return $qb->getQuery()->getScalarResult()[0];
    }

    public function getWeightSumAndVolumeSumByOrderIdAndTemperature($orderId, $temperature)
    {
        $ordersParameters = array(
            'orderId' => $orderId,
            'temperature' => $temperature
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('ROUND(sum(op.volumeTotal), 4)  as totalVolume')
            ->addSelect('ROUND(sum(op.poidsTotal), 2) as totalWeight')
            ->from('SogedialSiteBundle:LigneCommande', 'op')
            ->where('op.commande = :orderId')
            ->andWhere('op.temperatureProduit = :temperature')
            ->setParameters($ordersParameters);

        return $qb->getQuery()->getScalarResult()[0];
    }

    /**
     * Use to delete ligneCommande entries from a commande parameter where quantite = 0
     * before validate commande
     */
    public function deleteEmptyLignesCommande($orderId)
    {
        $ordersParameters = array(
            'order' => $orderId,
        );

        $qb = $this->_em->createQueryBuilder();
        $qb->delete('SogedialSiteBundle:LigneCommande', 'lc')
            ->where('lc.commande = :order')
            ->andWhere('lc.quantite = 0')
            ->setParameters($ordersParameters);

        $qb->getQuery()->execute();
    }

    /**
     * @param $orderId
     */
    public function clearPanierInactifProducts($orderId)
    {
        $ordersParameters = array(
            'order' => $orderId,
        );

        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('lc')
            ->from('SogedialSiteBundle:LigneCommande', 'lc')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'p.code = lc.produit')
            ->where('lc.commande = :order')
            ->andWhere('p.actif = 0')
            ->setParameters($ordersParameters);

        $results = $qb->getQuery()->execute();

        foreach ($results as $result) {
            $this->_em->remove($result);
        }

        $this->_em->flush();
    }

    /**
     * @param $orderId
     */
    public function clearStocklessProducts($orderId)
    {
        $ordersParameters = array(
            'order' => $orderId,
        );

        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('lc')
            ->from('SogedialSiteBundle:LigneCommande', 'lc')
            ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'p.code = lc.produit')
            ->leftJoin('Sogedial\SiteBundle\Entity\Stock', 's', \Doctrine\ORM\Query\Expr\Join::WITH, 's.produit = p.code')
            ->where('lc.commande = :order')
            ->andWhere('s.stockTheoriqueColis = 0')
            ->setParameters($ordersParameters);

        $results = $qb->getQuery()->execute();

        foreach ($results as $result) {
            $this->_em->remove($result);
        }

        $this->_em->flush();

    }

    public function getMOQRuleFromProductOfLigneCommande(LigneCommande $ligneCommande)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('rm')
            ->from('SogedialSiteBundle:LigneCommande', 'op')
            ->innerJoin('Sogedial\SiteBundle\Entity\ProduitRegle', 'pr',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'pr.code = op.produit')
            ->innerJoin('Sogedial\SiteBundle\Entity\RegleMOQ', 'rm',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'pr.regle = rm.code')
            ->innerJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'p.code = op.produit')
            ->where("p.code = :produitCode")
            ->setParameter('produitCode', $ligneCommande->getProduit()->getCode());

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getLigneCommandAndMOQFromCommandeCode($commandeCode)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('rm, op')
            ->from('SogedialSiteBundle:LigneCommande', 'op')
            ->leftJoin('Sogedial\SiteBundle\Entity\ProduitRegle', 'pr',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'pr.code = op.produit')
            ->leftJoin('Sogedial\SiteBundle\Entity\RegleMOQ', 'rm',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'pr.regle = rm.code')
            ->innerJoin('Sogedial\SiteBundle\Entity\Commande', 'o',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'o = op.commande')
            ->where('o.id = :commandeCode')
            ->setParameter('commandeCode', $commandeCode);

        return $qb->getQuery()->getResult();
    }

    public function getPendingMoqCount()
    {
        $qb = $this->createQueryBuilder('lc');
        $qb->select('COUNT(lc.id)')
            ->where('lc.moq = :moqPendingStatus');

        $qb->setParameter('moqPendingStatus', 0);
        return $qb->getQuery()->getSingleScalarResult();
    }


    /**
     * @param $orderId
     * @return mixed
     */
    public function getLigneByOrderId($orderId)
    {
        $ordersParameters = array(
            'orderId' => $orderId
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('op');
        $qb->from('SogedialSiteBundle:LigneCommande', 'op');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\Commande', 'o',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o.parent')
            ->where('o.id = :orderId')
            ->groupBy('op.produit')
            ->setParameters($ordersParameters);

        return $qb->getQuery()->getResult();

    }

    /**
     * @param $commandeId
     * @param $productCode
     * @return mixed
     */
    public function getLigneByCommandeIdAndProductCode($commandeId, $productCode)
    {
        $lcParams = array(
            'commandeId' => $commandeId,
            'productCode' => $productCode
        );

        $qb = $this->createQueryBuilder('lc')
            ->andWhere('lc.commande = :commandeId')
            ->andWhere('lc.produit = :productCode');

        $qb->setParameters($lcParams);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $orderId
     * @return mixed
     */
    public function getPanierProducts($orderId)
    {
        $ordersParameters = array(
            'orderId' => $orderId
        );

        $qb = $this->_em->createQueryBuilder();

        $qb->select('op.prixUnitaire, op.quantite, p.saleUnity, p.poidsVariable, p.pcb');
        $qb->from('SogedialSiteBundle:LigneCommande', 'op');
        $qb->leftJoin('Sogedial\SiteBundle\Entity\Commande', 'o',
            \Doctrine\ORM\Query\Expr\Join::WITH, 'op.commande = o.id')
           ->leftJoin('Sogedial\SiteBundle\Entity\Produit', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH, 'op.produit = p')
            ->where('o.id = :orderId')
            ->groupBy('op.produit')
            ->setParameters($ordersParameters);

        return $qb->getQuery()->getArrayResult();

    }
}
